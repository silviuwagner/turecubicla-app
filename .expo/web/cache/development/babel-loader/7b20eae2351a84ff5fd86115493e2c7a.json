{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/paulwagner/Documents/Licenta/app/src/screens/Recipe/RecipeScreen.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport styles from \"./styles\";\nimport Carousel, { Pagination } from 'react-native-snap-carousel';\nimport { getIngredientName, getCategoryName, getCategoryById } from \"../../data/MockDataAPI\";\nimport BackButton from \"../../components/BackButton/BackButton\";\nimport ViewIngredientsButton from \"../../components/ViewIngredientsButton/ViewIngredientsButton\";\n\nvar _Dimensions$get = Dimensions.get('window'),\n    viewportWidth = _Dimensions$get.width;\n\nvar RecipeScreen = function (_React$Component) {\n  _inherits(RecipeScreen, _React$Component);\n\n  var _super = _createSuper(RecipeScreen);\n\n  function RecipeScreen(props) {\n    var _this;\n\n    _classCallCheck(this, RecipeScreen);\n\n    _this = _super.call(this, props);\n\n    _this.renderImage = function (_ref) {\n      var item = _ref.item;\n      return React.createElement(TouchableHighlight, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 5\n        }\n      }, React.createElement(View, {\n        style: styles.imageContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 7\n        }\n      }, React.createElement(Image, {\n        style: styles.image,\n        source: {\n          uri: item\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }\n      })));\n    };\n\n    _this.state = {\n      activeSlide: 0,\n      loading: true,\n      dataSource: []\n    };\n    return _this;\n  }\n\n  _createClass(RecipeScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch(\"https://app.turecubicla.ro/trails/api/trails\").then(function (response) {\n        return response.json();\n      }).then(function (responseJson) {\n        _this2.setState({\n          loading: false,\n          dataSource: responseJson\n        });\n      }).catch(function (error) {\n        return console.log(error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var activeSlide = this.state.activeSlide;\n      var navigation = this.props.navigation;\n      var item = navigation.getParam('item');\n      return React.createElement(ScrollView, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: styles.infoRecipeContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: styles.infoRecipeName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }\n      }, item.title), React.createElement(View, {\n        style: styles.infoContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }\n      }, React.createElement(TouchableHighlight, {\n        onPress: function onPress() {\n          return navigation.navigate('RecipesList', {\n            category: category,\n            title: title\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: styles.category,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }\n      }, getCategoryName(item.categoryId).toUpperCase(), item.region))), React.createElement(View, {\n        style: styles.infoContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }\n      }, React.createElement(Image, {\n        style: styles.infoPhoto,\n        source: require(\"../../../assets/icons/time.png\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }\n      }), React.createElement(Text, {\n        style: styles.infoRecipe,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }\n      }, item.duration)), React.createElement(View, {\n        style: styles.infoContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }\n      }, React.createElement(ViewIngredientsButton, {\n        onPress: function onPress() {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }\n      })), React.createElement(View, {\n        style: styles.infoContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: styles.infoDescriptionRecipe,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }\n      }, item.about))));\n    }\n  }]);\n\n  return RecipeScreen;\n}(React.Component);\n\nRecipeScreen.navigationOptions = function (_ref2) {\n  var navigation = _ref2.navigation;\n  return {\n    headerTransparent: 'true',\n    headerLeft: React.createElement(BackButton, {\n      onPress: function onPress() {\n        navigation.goBack();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }\n    })\n  };\n};\n\nexport { RecipeScreen as default };","map":{"version":3,"sources":["/Users/paulwagner/Documents/Licenta/app/src/screens/Recipe/RecipeScreen.js"],"names":["React","styles","Carousel","Pagination","getIngredientName","getCategoryName","getCategoryById","BackButton","ViewIngredientsButton","Dimensions","get","viewportWidth","width","RecipeScreen","props","renderImage","item","imageContainer","image","uri","state","activeSlide","loading","dataSource","fetch","then","response","json","responseJson","setState","catch","error","console","log","navigation","getParam","container","infoRecipeContainer","infoRecipeName","title","infoContainer","navigate","category","categoryId","toUpperCase","region","infoPhoto","require","infoRecipe","duration","infoDescriptionRecipe","about","Component","navigationOptions","headerTransparent","headerLeft","goBack"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  FlatList,\n  ScrollView,\n  Text,\n  View,\n  TouchableOpacity,\n  Image,\n  Dimensions,\n  TouchableHighlight\n} from 'react-native';\nimport styles from './styles';\nimport Carousel, { Pagination } from 'react-native-snap-carousel';\nimport { getIngredientName, getCategoryName, getCategoryById } from '../../data/MockDataAPI';\nimport BackButton from '../../components/BackButton/BackButton';\nimport ViewIngredientsButton from '../../components/ViewIngredientsButton/ViewIngredientsButton';\n\nconst { width: viewportWidth } = Dimensions.get('window');\n\nexport default class RecipeScreen extends React.Component {\n  static navigationOptions = ({ navigation }) => {\n    return {\n      headerTransparent: 'true',\n      headerLeft: (\n        <BackButton\n          onPress={() => {\n            navigation.goBack();\n          }}\n        />\n      )\n    };\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeSlide: 0,\n      loading: true,\n      dataSource:[]\n    };\n  }\n\n  componentDidMount(){\n    fetch(\"https://app.turecubicla.ro/trails/api/trails\")\n        .then(response => response.json())\n        .then((responseJson)=> {\n            this.setState({\n                loading: false,\n                dataSource: responseJson\n            })\n        })\n        .catch(error=>console.log(error)) //to catch the errors if any\n  };\n\n  renderImage = ({ item }) => (\n    <TouchableHighlight>\n      <View style={styles.imageContainer}>\n        <Image style={styles.image} source={{ uri: item }} />\n      </View>\n    </TouchableHighlight>\n  );\n\n  // onPressIngredient = item => {\n  //   var name = getIngredientName(item);\n  //   let ingredient = item;\n  //   this.props.navigation.navigate('Ingredient', { region, title });\n  // };\n\n  render() {\n    const { activeSlide } = this.state;\n    const { navigation } = this.props;\n    const item = navigation.getParam('item');\n    // const category = getCategoryById(item.categoryId);\n    // const title = getCategoryName(category.id);\n\n    return (\n      <ScrollView style={styles.container}>\n        {/* <View style={styles.carouselContainer}>\n          <View style={styles.carousel}>\n            <Carousel\n              ref={c => {\n                this.slider1Ref = c;\n              }}\n              data={item.photosArray}\n              renderItem={this.renderImage}\n              sliderWidth={viewportWidth}\n              itemWidth={viewportWidth}\n              inactiveSlideScale={1}\n              inactiveSlideOpacity={1}\n              firstItem={0}\n              loop={false}\n              autoplay={false}\n              autoplayDelay={500}\n              autoplayInterval={3000}\n              onSnapToItem={index => this.setState({ activeSlide: index })}\n            />\n            <Pagination\n              dotsLength={item.photosArray.length}\n              activeDotIndex={activeSlide}\n              containerStyle={styles.paginationContainer}\n              dotColor=\"rgba(255, 255, 255, 0.92)\"\n              dotStyle={styles.paginationDot}\n              inactiveDotColor=\"white\"\n              inactiveDotOpacity={0.4}\n              inactiveDotScale={0.6}\n              carouselRef={this.slider1Ref}\n              tappableDots={!!this.slider1Ref}\n            />\n          </View>\n        </View> */}\n        <View style={styles.infoRecipeContainer}>\n          <Text style={styles.infoRecipeName}>{item.title}</Text>\n          <View style={styles.infoContainer}>\n            <TouchableHighlight\n              onPress={() => navigation.navigate('RecipesList', { category, title })}\n            >\n              <Text style={styles.category}>{getCategoryName(item.categoryId).toUpperCase()}{item.region}</Text>\n            </TouchableHighlight>\n          </View>\n\n          <View style={styles.infoContainer}>\n            <Image style={styles.infoPhoto} source={require('../../../assets/icons/time.png')} />\n            <Text style={styles.infoRecipe}>{item.duration}</Text>\n          </View>\n\n          <View style={styles.infoContainer}>\n            <ViewIngredientsButton\n              onPress={() => {\n                // let ingredients = item.ingredients;\n                // let title = 'Ingredients for ' + item.title;\n                // navigation.navigate('IngredientsDetails', { ingredients, title });\n              }}\n            />\n          </View>\n          <View style={styles.infoContainer}>\n            <Text style={styles.infoDescriptionRecipe}>{item.about}</Text>\n          </View>\n        </View>\n      </ScrollView>\n    );\n  }\n}\n\n/*cooking steps\n<View style={styles.infoContainer}>\n  <Image style={styles.infoPhoto} source={require('../../../assets/icons/info.png')} />\n  <Text style={styles.infoRecipe}>Cooking Steps</Text>\n</View>\n<Text style={styles.infoDescriptionRecipe}>{item.description}</Text>\n*/\n"]},"metadata":{},"sourceType":"module"}